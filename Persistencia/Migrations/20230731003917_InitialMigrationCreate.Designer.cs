// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistencia;

#nullable disable

namespace Persistencia.Migrations
{
    [DbContext(typeof(DinoShopContext))]
    [Migration("20230731003917_InitialMigrationCreate")]
    partial class InitialMigrationCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dominio.Marca", b =>
                {
                    b.Property<int>("IdMarca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("DecripcionMarca")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdMarca");

                    b.ToTable("marca", (string)null);
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Property<int>("IdPais")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NombrePais")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("IdPais");

                    b.ToTable("pais", (string)null);
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Property<int>("IdPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("ApellidoPersona")
                        .HasColumnType("longtext");

                    b.Property<int>("EdadPersona")
                        .HasColumnType("int");

                    b.Property<string>("NombrePersona")
                        .HasColumnType("longtext");

                    b.Property<int>("ProvId")
                        .HasColumnType("int");

                    b.Property<int?>("ProvinciaIdProvincia")
                        .HasColumnType("int");

                    b.Property<int>("TipoPerId")
                        .HasColumnType("int");

                    b.Property<int?>("TipoPersonaIdTipoPersona")
                        .HasColumnType("int");

                    b.HasKey("IdPersona");

                    b.HasIndex("ProvinciaIdProvincia");

                    b.HasIndex("TipoPersonaIdTipoPersona");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Dominio.PersonaProducto", b =>
                {
                    b.Property<int>("PersonaId")
                        .HasColumnType("int");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.HasKey("PersonaId", "ProductoId");

                    b.HasIndex("ProductoId");

                    b.ToTable("PersonaProductos");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Property<int>("IdProducto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<double>("DctoProducto")
                        .HasColumnType("double");

                    b.Property<string>("DescripcionProducto")
                        .HasColumnType("longtext");

                    b.Property<int>("MarcaId")
                        .HasColumnType("int");

                    b.Property<double>("PrecioProducto")
                        .HasColumnType("double");

                    b.Property<string>("RefProducto")
                        .HasColumnType("longtext");

                    b.HasKey("IdProducto");

                    b.HasIndex("MarcaId");

                    b.ToTable("Productos");
                });

            modelBuilder.Entity("Dominio.Provincia", b =>
                {
                    b.Property<int>("IdProvincia")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.Property<int>("RegId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionIdRegion")
                        .HasColumnType("int");

                    b.HasKey("IdProvincia");

                    b.HasIndex("RegionIdRegion");

                    b.ToTable("Provincias");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Property<int>("IdRegion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("PaisId")
                        .HasColumnType("int");

                    b.HasKey("IdRegion");

                    b.HasIndex("PaisId");

                    b.ToTable("region", (string)null);
                });

            modelBuilder.Entity("Dominio.TipoPersona", b =>
                {
                    b.Property<int>("IdTipoPersona")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasColumnType("longtext");

                    b.HasKey("IdTipoPersona");

                    b.ToTable("TipoPersonas");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.HasOne("Dominio.Provincia", "Provincia")
                        .WithMany("Personas")
                        .HasForeignKey("ProvinciaIdProvincia");

                    b.HasOne("Dominio.TipoPersona", "TipoPersona")
                        .WithMany("Personas")
                        .HasForeignKey("TipoPersonaIdTipoPersona");

                    b.Navigation("Provincia");

                    b.Navigation("TipoPersona");
                });

            modelBuilder.Entity("Dominio.PersonaProducto", b =>
                {
                    b.HasOne("Dominio.Persona", "Persona")
                        .WithMany("PersonaProductos")
                        .HasForeignKey("PersonaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dominio.Producto", "Producto")
                        .WithMany("PersonaProductos")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Persona");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.HasOne("Dominio.Marca", "Marca")
                        .WithMany("Productos")
                        .HasForeignKey("MarcaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Marca");
                });

            modelBuilder.Entity("Dominio.Provincia", b =>
                {
                    b.HasOne("Dominio.Region", "Region")
                        .WithMany("Provincias")
                        .HasForeignKey("RegionIdRegion");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.HasOne("Dominio.Pais", "Pais")
                        .WithMany("Regiones")
                        .HasForeignKey("PaisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pais");
                });

            modelBuilder.Entity("Dominio.Marca", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Dominio.Pais", b =>
                {
                    b.Navigation("Regiones");
                });

            modelBuilder.Entity("Dominio.Persona", b =>
                {
                    b.Navigation("PersonaProductos");
                });

            modelBuilder.Entity("Dominio.Producto", b =>
                {
                    b.Navigation("PersonaProductos");
                });

            modelBuilder.Entity("Dominio.Provincia", b =>
                {
                    b.Navigation("Personas");
                });

            modelBuilder.Entity("Dominio.Region", b =>
                {
                    b.Navigation("Provincias");
                });

            modelBuilder.Entity("Dominio.TipoPersona", b =>
                {
                    b.Navigation("Personas");
                });
#pragma warning restore 612, 618
        }
    }
}
